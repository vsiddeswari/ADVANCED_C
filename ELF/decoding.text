#include<stdio.h>
int a,b,c=2;                     	/*! global variables */
static int x,y=10,z=20; 		/*! gloal static variables */
const char str[] = "hello";
int main()
{
 			                /*! local variables */
        static int i,j,k,n=8,m=9;       /*! local static variables */
        printf("hello world\n");
        return 0;
}


			/*!   ELF Header  */

00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  03 00 3e 00 01 00 00 00  60 10 00 00 00 00 00 00  |..>.....`.......|
00000020  40 00 00 00 00 00 00 00  d0 3a 00 00 00 00 00 00  |@........:......|
00000030  00 00 00 00 40 00 38 00  0d 00 40 00 1f 00 1e 00  |....@.8...@.....|


  e_ident[EI_MAG0..EI_MAG3]	0x7f + ELF		Magic Number
  e_ident[EI_CLASS}		0x02			64-bit Architecture
  e_ident[EI_DATA]		0x01			Little Endian
  e_ident[EI_VERSION]		0x01			ELF Version V1
  e_ident[EI_OSABI]		0x00			System Version V
  e_ident[EI_ABIVERSION]	0x00			Unused
  e_ident[EI_PAD] 		0x00000000000000	7 bytes unused
  e_type			0x0003			ET_Shared
  e_machine			0x003e			X86_64
  e_version			0x00000001		Version 1
  e_entry			0x0000000000001060	Entry point address to which the system first transfers control.
  e_phoff			0x0000000000000040	Program header table offset
  e_shoff			0x0000000000003ad0	section header table offset
  e_flags			0x00000000		Architecture dependent interpretation
  e_ehsize			0x0040			Size of this ELF header file
  e_phentsize			0x0038			Size of each header entry.
  e_phnum			0x000d			Number of program header table entries.
  e_shentsize			0x0040			Size of each entry in section header table.
  e_shnum			0x001f			Number of section header table entries.
  e_shstrndx			0x001e			Holds the section header table index of the entry associated with the section name string table.


           /*! Program header table Entry */
In Elf Header the e_phoff member represents the program header table offset in this program e_phoff = 0x0000000000000040. This Elf file contains total 13 program header entries. 

          /*! program header table entry 1 p_type = PHDR */        

00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000050  40 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |@.......@.......|
00000060  d8 02 00 00 00 00 00 00  d8 02 00 00 00 00 00 00  |................|
00000070  08 00 00 00 00 00 00 00  			    |................|


      p_type              0x00000006           		PHDR type
      p_flags             0x00000004           		Read_ONLY access
      p_offset            0x0000000000000040		Offset from the beginning of the file at which the first byte of the segment resides.
      p_vaddr		  0x0000000000000040		Virtual address at which the first byte of the segment resides in memory.
      p_paddr		  0x0000000000000040            Physical address of the segment.
      p_filesz            0x00000000000002d8		This member holds the number of bytes in the file image of the  segment.
      p_memsz		  0x00000000000002d8		This  member  holds  the  number of bytes in the memory image of the segment.
      p_align             0x0000000000000008		Alignment in memory.


         /*! Section header table Entry       */
In Elf header the e_shoff member represents the section header table offset in this program e_shoff = 0x0000000000003ad0. This Elf file contains total 31 sections.

	/*! Section header table entry 1 sh_type = NULL   */

00003ad0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00003ae0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00003af0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00003b00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|

	       sh_name		0x00000000		Offset in the section header table
               sh_type		0x00000000		type = NULL
               sh_flags		0x0000000000000000	No flags to this section
               sh_addr		0x0000000000000000	Address of the section
               sh_offset     	0x0000000000000000	Offset in the file where the section resides
               sh_size		0x0000000000000000	Size of the section
               sh_link		0x00000000	  	No links to other sections
               sh_info		0x00000000		More information about the section
               sh_addralign	0x0000000000000000	Alignment 
               sh_entsize	0x0000000000000000	Some sections hold a table of fixed-sized entries, such as
              							a symbol table.  For such a section, this member gives the
              							size in bytes for each entry.  This member contains zero
              							if the section does not hold a table of fixed-size
              							entries.

 	       

	/*! Section header table entry 19 .rodata section */

00003f50  c5 00 00 00 01 00 00 00  02 00 00 00 00 00 00 00  |................|
00003f60  00 20 00 00 00 00 00 00  00 20 00 00 00 00 00 00  |. ....... ......|
00003f70  16 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00003f80  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|

		
	       sh_name		0x000000c5		Offset in the section header table
               sh_type		0x00000001		type = PROGBITS
               sh_flags		0x0000000000000002	Readonly
               sh_addr		0x0000000000002000	Address of the section
               sh_offset     	0x0000000000002000	Offset in the file where the section resides
               sh_size		0x0000000000000016	Size of the section
               sh_link		0x00000000	  	No links to other sections
               sh_info		0x00000000		More information about the section
               sh_addralign	0x0000000000000004	Alignment 
               sh_entsize	0x0000000000000000	Some sections hold a table of fixed-sized entries, such as
              							a symbol table.  For such a section, this member gives the
              							size in bytes for each entry.  This member contains zero
              							if the section does not hold a table of fixed-size
              							entries.

	/*! .rodata section */
	       
00002000  01 00 02 00 68 65 6c 6c  6f 00 68 65 6c 6f 6f 20  |....hello.hello |
00002010  77 6f 72 6c 64 00 00 00  			    |world...........|


/*! if we want to know Name of the section. The .shstrtab section contains all the section names in Elf file. it will be the last section. */

	/*! section header table entry 31   .shstrtab      */

00004250  11 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|
00004260  00 00 00 00 00 00 00 00  b6 39 00 00 00 00 00 00  |.........9......|
00004270  1a 01 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00004280  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|


	       sh_name		0x00000011		Offset in the section header table
               sh_type		0x00000003		type = STRTAB
               sh_flags		0x0000000000000000	No flags to this section
               sh_addr		0x0000000000000000	Address of the section
               sh_offset     	0x00000000000039b6	Offset in the file where the section resides
               sh_size		0x000000000000011a	Size of the section
               sh_link		0x00000000	  	No links to other sections
               sh_info		0x00000000		More information about the section
               sh_addralign	0x0000000000000001	Alignment 
               sh_entsize	0x0000000000000000	Some sections hold a table of fixed-sized entries, such as
              							a symbol table.  For such a section, this member gives the
              							size in bytes for each entry.  This member contains zero
              							if the section does not hold a table of fixed-size
              							entries.


	     /*! .shstrtab section */  

000039b0  32 2e 32 2e 35 00 00 2e  73 79 6d 74 61 62 00 2e  |2.2.5...symtab..|
000039c0  73 74 72 74 61 62 00 2e  73 68 73 74 72 74 61 62  |strtab..shstrtab|
000039d0  00 2e 69 6e 74 65 72 70  00 2e 6e 6f 74 65 2e 67  |..interp..note.g|
000039e0  6e 75 2e 70 72 6f 70 65  72 74 79 00 2e 6e 6f 74  |nu.property..not|
000039f0  65 2e 67 6e 75 2e 62 75  69 6c 64 2d 69 64 00 2e  |e.gnu.build-id..|
00003a00  6e 6f 74 65 2e 41 42 49  2d 74 61 67 00 2e 67 6e  |note.ABI-tag..gn|
00003a10  75 2e 68 61 73 68 00 2e  64 79 6e 73 79 6d 00 2e  |u.hash..dynsym..|
00003a20  64 79 6e 73 74 72 00 2e  67 6e 75 2e 76 65 72 73  |dynstr..gnu.vers|
00003a30  69 6f 6e 00 2e 67 6e 75  2e 76 65 72 73 69 6f 6e  |ion..gnu.version|
00003a40  5f 72 00 2e 72 65 6c 61  2e 64 79 6e 00 2e 72 65  |_r..rela.dyn..re|
00003a50  6c 61 2e 70 6c 74 00 2e  69 6e 69 74 00 2e 70 6c  |la.plt..init..pl|
00003a60  74 2e 67 6f 74 00 2e 70  6c 74 2e 73 65 63 00 2e  |t.got..plt.sec..|
00003a70  74 65 78 74 00 2e 66 69  6e 69 00 2e 72 6f 64 61  |text..fini..roda|
00003a80  74 61 00 2e 65 68 5f 66  72 61 6d 65 5f 68 64 72  |ta..eh_frame_hdr|
00003a90  00 2e 65 68 5f 66 72 61  6d 65 00 2e 69 6e 69 74  |..eh_frame..init|
00003aa0  5f 61 72 72 61 79 00 2e  66 69 6e 69 5f 61 72 72  |_array..fini_arr|
00003ab0  61 79 00 2e 64 79 6e 61  6d 69 63 00 2e 64 61 74  |ay..dynamic..dat|
00003ac0  61 00 2e 62 73 73 00 2e  63 6f 6d 6d 65 6e 74 00  |a..bss..comment.|


	/*! Section header table entry  26 .data section */

00004110  06 01 00 00 01 00 00 00  03 00 00 00 00 00 00 00  |................|
00004120  00 40 00 00 00 00 00 00  00 30 00 00 00 00 00 00  |.@.......0......|
00004130  24 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |$...............|
00004140  08 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|


	       sh_name		0x00000106		Offset in the section header table
               sh_type		0x00000001		type = PROGBITS
               sh_flags		0x0000000000000003	Read and Write
               sh_addr		0x0000000000004000	Address of the section
               sh_offset     	0x0000000000003000	Offset in the file where the section resides
               sh_size		0x0000000000000024	Size of the section
               sh_link		0x00000000	  	No links to other sections
               sh_info		0x00000000		More information about the section
               sh_addralign	0x0000000000000008	Alignment 
               sh_entsize	0x0000000000000000	Some sections hold a table of fixed-sized entries, such as
              							a symbol table.  For such a section, this member gives the
              							size in bytes for each entry.  This member contains zero
              							if the section does not hold a table of fixed-size
              							entries.

00003000  00 00 00 00 00 00 00 00  08 40 00 00 00 00 00 00  |.........@......|
00003010  02 00 00 00 0a 00 00 00  14 00 00 00 09 00 00 00  |................|
00003020  08 00 00 00
